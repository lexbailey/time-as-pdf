#![allow(non_upper_case_globals)]
#[macro_use] extern crate rocket;

use pdf_writer::{types::LineCapStyle, Pdf, Rect, Ref, Name, Finish, Str, Content};
use rocket::http::ContentType;
use rocket::request;
use rocket::request::FromRequest;
use rocket::Request;
use chrono::prelude::*;
use std::f32::consts::PI;

const helptext: &'static str = "This service generates PDF documents that tell you what time it is.\nBy default it reports the time in UTC+1. You can get other time zones at /UTC+/<n> and /UTC-/<n> where n is a number of hours.\nn can be a fractional number of hours. For example: /UTC+/5.5 can be used to get IST (Indian Standard Time)";

/// draws a line going out from 0,0, starting at distance "from" and
/// ending at distance "to".
fn radial_line(content: &mut Content, angle: f32, from: f32, to: f32) {
    content.save_state();
    content.transform([angle.cos(), -angle.sin(), angle.sin(), angle.cos(), 0., 0.]);
    content.move_to(0.0, from);
    content.line_to(0.0, to);
    content.stroke();
    content.restore_state();
}
/// draws a clockface on content, with radius 100 around 0,0
/// use transforms to scale and position it
fn clockface(content: &mut Content, now: DateTime<FixedOffset>) {
    content.set_line_width(3.);
    content.set_line_cap(LineCapStyle::RoundCap);

    //ticks
    for i in 0..60 {
        let angle: f32 = 2. * PI / 60. * i as f32;

        if i % 5 == 0 {
            radial_line(content, angle, 80., 100.);
        } else {
            radial_line(content, angle, 90., 100.);
        }
    }
    radial_line(content, 2. * PI / 60. * now.minute() as f32, 0., 70.);
    radial_line(content, 2. * PI / 12. * now.hour() as f32, 0., 48.);

    content.set_line_width(1.);
    radial_line(content, 2. * PI / 60. * now.second() as f32, 0., 75.);
}

fn time_as_pdf(url: &str, offset: i32) -> Vec<u8>{
    let mut pdf = Pdf::new();

    let catalog_id = Ref::new(1);
    let page_tree_id = Ref::new(2);
    let page_id = Ref::new(3);
    let font_id = Ref::new(4);
    let content_id = Ref::new(5);
    let font_name = Name(b"F1");

    pdf.catalog(catalog_id).pages(page_tree_id);
    pdf.pages(page_tree_id).kids([page_id]).count(1);

    let mut page = pdf.page(page_id);
    page.media_box(Rect::new(0.0, 0.0, 595.0, 842.0));
    page.parent(page_tree_id);
    page.contents(content_id);
    page.resources().fonts().pair(font_name, font_id);
    page.finish();
    pdf.type1_font(font_id).base_font(Name(b"Helvetica"));


    let zone = FixedOffset::east_opt(offset).unwrap();
    let now = Utc::now().with_timezone(&zone);
    let header1 = format!("The current time in UTC{} is", zone);
    let timetext = format!("{}", now.format("%H:%M"));
    let datetext = format!("{}", now.format("%Y-%m-%d"));
    let rfc3339text= now.to_rfc3339();

    let mut content = Content::new();

    macro_rules! txt {
        ($x:expr, $y:expr, $s:expr, $text:expr) => {
            content.begin_text();
            content.set_font(font_name, $s);
            content.next_line($x, $y);
            content.show(Str($text));
            content.end_text();
        }
    }

    txt!(108.0, 734.0, 14.0, header1.as_bytes());
    txt!(108.0, 634.0, 100.0, timetext.as_bytes());
    txt!(108.0, 600.0, 14.0, b"on the date of");
    txt!(108.0, 544.0, 50.0, datetext.as_bytes());
    txt!(108.0, 510.0, 14.0, rfc3339text.as_bytes());

    content.save_state();
    content.transform([1.2, 0., 0., 1.2, 595. / 2., 300.]);

    clockface(&mut content, now);
    content.restore_state();

    txt!(108.0, 100.0, 14.0, format!("Generated by the URL: {}", url).as_bytes());

    pdf.stream(content_id, &content.finish());

    // Finish writing (this automatically creates the cross-reference table and
    // file trailer) and retrieve the resulting byte buffer.
    let buf: Vec<u8> = pdf.finish();
    buf
}

struct ReqInfo{
    uri: String,
}

#[rocket::async_trait]
impl<'r> FromRequest<'r> for ReqInfo {
    type Error = ();

    async fn from_request<'l0>(r: &'r Request<'l0>) -> request::Outcome<Self, Self::Error>{
        rocket::outcome::Outcome::Success(ReqInfo{uri:format!("{}",r.uri())})
    }
}

#[get("/")]
fn index(request: ReqInfo) -> (ContentType, Vec<u8>) {
    let url = format!("https://time-as-pdf.site{}", request.uri);
    let pdf = time_as_pdf(&url, 1 * 60 * 60); // default UTC+1
    (ContentType::PDF, pdf)
}

#[get("/UTC+/<n>")]
fn utcplus(n: f32, request: ReqInfo) -> (ContentType, Vec<u8>) {
    let url = format!("https://time-as-pdf.site{}", request.uri);
    let pdf = time_as_pdf(&url, (n * 60.0 * 60.0).floor() as i32);
    (ContentType::PDF, pdf)
}

#[get("/UTC-/<n>")]
fn utcminus(n: f32, request: ReqInfo) -> (ContentType, Vec<u8>) {
    let url = format!("https://time-as-pdf.site{}", request.uri);
    let pdf = time_as_pdf(&url, (-n * 60.0 * 60.0).floor() as i32);
    (ContentType::PDF, pdf)
}

#[get("/humans.txt")]
fn humans() -> (ContentType, &'static str) {
    (ContentType::Text, helptext)
}

#[launch]
fn rocket() -> _ {
    rocket::build()
        .mount("/", routes![index, humans, utcplus, utcminus])
}
